#!/usr/bin/env python3
"""
Script para verificar o valor real da vari√°vel de ambiente no frontend
"""

import requests
import re
import json

def check_environment_variable():
    """Verifica o valor real da vari√°vel de ambiente no frontend"""
    print("üîç Verificando vari√°vel de ambiente no frontend...")
    
    try:
        # Acessar o frontend
        response = requests.get("https://finaflow.vercel.app", timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ Frontend acess√≠vel")
            
            # Procurar por NEXT_PUBLIC_API_URL no c√≥digo fonte
            content = response.text
            
            # Padr√µes para encontrar a vari√°vel
            patterns = [
                r'NEXT_PUBLIC_API_URL["\']?\s*[:=]\s*["\']([^"\']+)["\']',
                r'process\.env\.NEXT_PUBLIC_API_URL',
                r'baseURL["\']?\s*[:=]\s*["\']([^"\']+)["\']',
            ]
            
            found_urls = []
            
            for pattern in patterns:
                matches = re.findall(pattern, content, re.IGNORECASE)
                found_urls.extend(matches)
            
            # Procurar por URLs espec√≠ficas do backend
            backend_patterns = [
                r'["\'](https?://finaflow-backend[^"\']+)["\']',
                r'["\'](https?://[^"\']*\.a\.run\.app[^"\']*)["\']',
            ]
            
            for pattern in backend_patterns:
                matches = re.findall(pattern, content)
                found_urls.extend(matches)
            
            print(f"\nüìä URLs encontradas no c√≥digo fonte:")
            if found_urls:
                for url in set(found_urls):
                    if url:
                        protocol = "üî¥ HTTP" if url.startswith("http://") else "üü¢ HTTPS"
                        print(f"   {protocol}: {url}")
            else:
                print("   ‚ö†Ô∏è  Nenhuma URL encontrada")
            
            # Verificar se h√° algum script que define a URL
            script_patterns = [
                r'<script[^>]*>([^<]+)</script>',
                r'window\.__NEXT_DATA__\s*=\s*({[^<]+})',
            ]
            
            print(f"\nüîç Verificando scripts inline...")
            for pattern in script_patterns:
                matches = re.findall(pattern, content, re.DOTALL)
                for match in matches:
                    if 'finaflow-backend' in match or 'NEXT_PUBLIC_API_URL' in match:
                        print(f"   üìÑ Script encontrado com refer√™ncia ao backend")
                        # Procurar por URLs HTTP no script
                        http_urls = re.findall(r'http://[^"\']*finaflow-backend[^"\']*', match)
                        if http_urls:
                            print(f"   ‚ùå URLs HTTP encontradas no script:")
                            for url in http_urls:
                                print(f"      - {url}")
            
            return len([url for url in found_urls if url.startswith("http://")]) > 0
                
        else:
            print(f"‚ùå Frontend n√£o acess√≠vel: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao acessar frontend: {e}")
        return False

def check_build_output():
    """Verifica se h√° algum arquivo de build que pode conter a URL hardcoded"""
    print("\nüîç Verificando se h√° URLs hardcoded...")
    
    try:
        # Tentar acessar arquivos JavaScript compilados
        js_files = [
            "/_next/static/chunks/pages/transactions-*.js",
            "/_next/static/chunks/pages/csv-import-*.js",
            "/_next/static/chunks/pages/_app-*.js",
        ]
        
        for js_pattern in js_files:
            try:
                # Tentar acessar o diret√≥rio _next
                response = requests.get("https://finaflow.vercel.app/_next/static/chunks/", timeout=5)
                if response.status_code == 200:
                    print("   üìÅ Diret√≥rio _next acess√≠vel")
                    break
            except:
                pass
        
        # Verificar se h√° algum arquivo de configura√ß√£o
        config_files = [
            "/next.config.js",
            "/package.json",
            "/.env",
            "/.env.local",
        ]
        
        for config_file in config_files:
            try:
                response = requests.get(f"https://finaflow.vercel.app{config_file}", timeout=5)
                if response.status_code == 200:
                    print(f"   üìÑ {config_file} acess√≠vel")
                    content = response.text
                    if 'http://' in content and 'finaflow-backend' in content:
                        print(f"   ‚ùå {config_file} cont√©m URL HTTP!")
            except:
                pass
                
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Erro ao verificar build: {e}")

def provide_detailed_solution():
    """Fornece solu√ß√£o detalhada"""
    print("\nüîß SOLU√á√ÉO DETALHADA:")
    print("=" * 50)
    print("O problema pode estar em v√°rias fontes:")
    print("\n1. üìù Verificar arquivos de configura√ß√£o:")
    print("   - .env.local")
    print("   - .env.production") 
    print("   - next.config.js")
    print("\n2. üîÑ For√ßar rebuild completo:")
    print("   - Deletar .next/ no Vercel")
    print("   - Fazer commit com mudan√ßa real")
    print("\n3. üõ†Ô∏è  Verificar se h√° fallback hardcoded:")
    print("   - Procurar por 'http://' no c√≥digo")
    print("   - Verificar se h√° valor padr√£o")

def main():
    print("üöÄ Debug da Vari√°vel de Ambiente - finaFlow")
    print("=" * 50)
    
    has_http = check_environment_variable()
    check_build_output()
    provide_detailed_solution()
    
    if has_http:
        print("\n‚ùå PROBLEMA CONFIRMADO: URLs HTTP encontradas no frontend")
    else:
        print("\n‚úÖ Nenhuma URL HTTP encontrada no c√≥digo fonte")
        print("   O problema pode estar no build ou cache")

if __name__ == "__main__":
    main()
