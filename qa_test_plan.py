#!/usr/bin/env python3
"""
PLANO PROFISSIONAL DE QA - FinaFlow
Testes automatizados com Selenium para valida√ß√£o real do sistema
"""

import time
import unittest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import json
import requests

class FinaFlowQATest(unittest.TestCase):
    """Testes automatizados para o sistema FinaFlow"""
    
    def setUp(self):
        """Configura√ß√£o inicial do ambiente de teste"""
        print("üîß Configurando ambiente de teste...")
        
        # Configura√ß√µes do Chrome
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--window-size=1920,1080")
        
        # Inicializar driver
        self.driver = webdriver.Chrome(options=chrome_options)
        self.wait = WebDriverWait(self.driver, 10)
        
        # URLs do sistema
        self.frontend_url = "https://finaflow.vercel.app"
        self.backend_url = "https://finaflow-backend-609095880025.us-central1.run.app"
        
        # Credenciais de teste
        self.test_credentials = {
            "username": "admin",
            "password": "test"
        }
        
        print("‚úÖ Ambiente configurado com sucesso")

    def tearDown(self):
        """Limpeza ap√≥s os testes"""
        if hasattr(self, 'driver'):
            self.driver.quit()
        print("üßπ Ambiente limpo")

    def test_01_backend_health_check(self):
        """Teste 1: Verificar se o backend est√° respondendo"""
        print("\nüîç Teste 1: Verifica√ß√£o de sa√∫de do backend")
        
        try:
            response = requests.get(f"{self.backend_url}/health", timeout=10)
            self.assertEqual(response.status_code, 200)
            print("‚úÖ Backend respondendo corretamente")
            
            response = requests.get(f"{self.backend_url}/api/v1/auth/users", timeout=10)
            self.assertEqual(response.status_code, 200)
            users_data = response.json()
            self.assertIsInstance(users_data, list)
            print(f"‚úÖ Endpoint de usu√°rios funcionando - {len(users_data)} usu√°rios encontrados")
            
        except requests.exceptions.RequestException as e:
            self.fail(f"‚ùå Backend n√£o est√° respondendo: {e}")

    def test_02_frontend_accessibility(self):
        """Teste 2: Verificar se o frontend est√° acess√≠vel"""
        print("\nüîç Teste 2: Acessibilidade do frontend")
        
        try:
            self.driver.get(f"{self.frontend_url}/login")
            self.wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
            
            title = self.driver.title
            self.assertIn("FinaFlow", title)
            print(f"‚úÖ Frontend acess√≠vel - T√≠tulo: {title}")
            
        except TimeoutException:
            self.fail("‚ùå Frontend n√£o carregou dentro do tempo limite")

    def test_03_login_functionality(self):
        """Teste 3: Testar funcionalidade de login"""
        print("\nüîç Teste 3: Funcionalidade de login")
        
        try:
            self.driver.get(f"{self.frontend_url}/login")
            self.wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
            
            username_field = self.wait.until(
                EC.presence_of_element_located((By.NAME, "username"))
            )
            password_field = self.driver.find_element(By.NAME, "password")
            
            username_field.clear()
            username_field.send_keys(self.test_credentials["username"])
            
            password_field.clear()
            password_field.send_keys(self.test_credentials["password"])
            
            login_button = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Entrar')]")
            login_button.click()
            
            self.wait.until(EC.url_contains("dashboard"))
            print("‚úÖ Login realizado com sucesso")
            
        except (TimeoutException, NoSuchElementException) as e:
            self.fail(f"‚ùå Falha no login: {e}")

    def test_04_users_page_navigation(self):
        """Teste 4: Navega√ß√£o para p√°gina de usu√°rios"""
        print("\nüîç Teste 4: Navega√ß√£o para p√°gina de usu√°rios")
        
        try:
            self.test_03_login_functionality()
            time.sleep(2)
            
            # Procurar por diferentes seletores para o link de usu√°rios
            users_link = None
            selectors = [
                "//a[contains(text(), 'Usu√°rios')]",
                "//a[contains(text(), 'Users')]",
                "//a[@href='/users']",
                "//a[contains(@href, 'users')]"
            ]
            
            for selector in selectors:
                try:
                    users_link = self.wait.until(
                        EC.element_to_be_clickable((By.XPATH, selector))
                    )
                    print(f"   ‚úÖ Link de usu√°rios encontrado com seletor: {selector}")
                    break
                except:
                    continue
            
            if not users_link:
                self.fail("‚ùå Link de usu√°rios n√£o encontrado com nenhum seletor")
            users_link.click()
            
            self.wait.until(EC.url_contains("users"))
            print("‚úÖ Navega√ß√£o para p√°gina de usu√°rios bem-sucedida")
            
        except (TimeoutException, NoSuchElementException) as e:
            self.fail(f"‚ùå Falha na navega√ß√£o para usu√°rios: {e}")

    def test_05_users_page_loading(self):
        """Teste 5: Carregamento da p√°gina de usu√°rios"""
        print("\nüîç Teste 5: Carregamento da p√°gina de usu√°rios")
        
        try:
            self.test_04_users_page_navigation()
            
            self.wait.until(
                EC.presence_of_element_located((By.XPATH, "//h1[contains(text(), 'Usu√°rios')]"))
            )
            
            users_table = self.wait.until(
                EC.presence_of_element_located((By.TAG_NAME, "table"))
            )
            print("‚úÖ P√°gina de usu√°rios carregada corretamente")
            
            table_rows = users_table.find_elements(By.TAG_NAME, "tr")
            self.assertGreater(len(table_rows), 1)
            print(f"‚úÖ Tabela de usu√°rios com {len(table_rows)-1} registros")
            
        except (TimeoutException, NoSuchElementException) as e:
            self.fail(f"‚ùå Falha no carregamento da p√°gina de usu√°rios: {e}")

    def test_06_create_user_form(self):
        """Teste 6: Testar formul√°rio de cria√ß√£o de usu√°rio"""
        print("\nüîç Teste 6: Formul√°rio de cria√ß√£o de usu√°rio")
        
        try:
            self.test_05_users_page_loading()
            
            new_user_button = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Novo Usu√°rio')]"))
            )
            new_user_button.click()
            
            self.wait.until(
                EC.presence_of_element_located((By.XPATH, "//h2[contains(text(), 'Novo Usu√°rio')]"))
            )
            print("‚úÖ Modal de cria√ß√£o de usu√°rio aberto")
            
            form_fields = {
                "name": "Teste QA",
                "email": "teste.qa@empresa.com",
                "phone": "(11) 12345-6789"
            }
            
            for field_name, field_value in form_fields.items():
                try:
                    field = self.driver.find_element(By.NAME, field_name)
                    field.clear()
                    field.send_keys(field_value)
                    time.sleep(0.5)
                    
                    actual_value = field.get_attribute("value")
                    self.assertEqual(actual_value, field_value)
                    print(f"‚úÖ Campo {field_name} funcionando corretamente")
                    
                except NoSuchElementException:
                    print(f"‚ö†Ô∏è Campo {field_name} n√£o encontrado")
            
            print("‚úÖ Formul√°rio preenchido com sucesso")
            
        except (TimeoutException, NoSuchElementException) as e:
            self.fail(f"‚ùå Falha no formul√°rio de cria√ß√£o: {e}")

    def test_07_form_field_focus_issue(self):
        """Teste 7: Verificar problema de perda de foco nos campos"""
        print("\nüîç Teste 7: Verifica√ß√£o de perda de foco nos campos")
        
        try:
            self.test_06_create_user_form()
            
            name_field = self.driver.find_element(By.NAME, "name")
            name_field.click()
            name_field.clear()
            
            test_text = "Teste de digita√ß√£o cont√≠nua"
            for char in test_text:
                name_field.send_keys(char)
                time.sleep(0.1)
                
                focused_element = self.driver.switch_to.active_element
                if focused_element != name_field:
                    self.fail(f"‚ùå Campo perdeu foco ap√≥s digitar '{char}'")
            
            print("‚úÖ Campo mant√©m foco durante digita√ß√£o")
            
        except (TimeoutException, NoSuchElementException) as e:
            self.fail(f"‚ùå Falha no teste de foco: {e}")

def run_qa_tests():
    """Executar todos os testes de QA"""
    print("üöÄ INICIANDO TESTES PROFISSIONAIS DE QA - FinaFlow")
    print("=" * 60)
    
    suite = unittest.TestLoader().loadTestsFromTestCase(FinaFlowQATest)
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIO FINAL DE QA")
    print("=" * 60)
    print(f"‚úÖ Testes executados: {result.testsRun}")
    print(f"‚ùå Falhas: {len(result.failures)}")
    print(f"‚ö†Ô∏è Erros: {len(result.errors)}")
    
    if result.failures:
        print("\nüîç DETALHES DAS FALHAS:")
        for test, traceback in result.failures:
            print(f"\n‚ùå {test}:")
            print(traceback)
    
    if result.errors:
        print("\nüîç DETALHES DOS ERROS:")
        for test, traceback in result.errors:
            print(f"\n‚ö†Ô∏è {test}:")
            print(traceback)
    
    if result.wasSuccessful():
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        return True
    else:
        print("\n‚ùå ALGUNS TESTES FALHARAM - NECESS√ÅRIO CORRE√á√ÉO")
        return False

if __name__ == "__main__":
    success = run_qa_tests()
    exit(0 if success else 1)
