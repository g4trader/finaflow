#!/usr/bin/env python3
"""
Teste de QA Profissional - FinaFlow
Valida√ß√£o completa do CRUD de usu√°rios com verifica√ß√£o no banco de dados
"""

import unittest
import time
import requests
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service

class FinaFlowQATest(unittest.TestCase):
    def setUp(self):
        """Configura√ß√£o do ambiente de teste"""
        print("üîß Configurando ambiente de teste...")
        
        # URLs
        self.frontend_url = "https://finaflow.vercel.app"
        self.backend_url = "https://finaflow-backend-609095880025.us-central1.run.app"
        
        # Configurar Chrome
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        
        # Inicializar driver
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        self.wait = WebDriverWait(self.driver, 10)
        
        # Dados de teste
        self.test_user = {
            "name": f"Usu√°rio Teste QA {int(time.time())}",
            "email": f"teste.qa.{int(time.time())}@finaflow.com",
            "phone": f"1199999{int(time.time()) % 10000:04d}",
            "role": "user",
            "status": "active"
        }
        
        self.created_user_id = None
        self.auth_token = None
        
        print("‚úÖ Ambiente configurado com sucesso")

    def tearDown(self):
        """Limpeza do ambiente de teste"""
        print("üßπ Ambiente limpo")
        if self.driver:
            self.driver.quit()

    def test_01_backend_health_check(self):
        """Teste 1: Verificar se o backend est√° respondendo"""
        print("\nüîç Teste 1: Verifica√ß√£o de sa√∫de do backend")
        
        # Verificar se o backend est√° online
        try:
            response = requests.get(f"{self.backend_url}/health", timeout=10)
            self.assertEqual(response.status_code, 200)
            print("‚úÖ Backend respondendo corretamente")
        except Exception as e:
            self.fail(f"‚ùå Backend n√£o est√° respondendo: {e}")
        
        # Verificar endpoint de usu√°rios
        try:
            response = requests.get(f"{self.backend_url}/api/v1/users", timeout=10)
            self.assertEqual(response.status_code, 200)
            users = response.json()
            print(f"‚úÖ Endpoint de usu√°rios funcionando - {len(users)} usu√°rios encontrados")
        except Exception as e:
            self.fail(f"‚ùå Endpoint de usu√°rios falhou: {e}")

    def test_02_login_and_get_token(self):
        """Teste 2: Fazer login e obter token de autentica√ß√£o"""
        print("\nüîç Teste 2: Login e obten√ß√£o de token")
        
        # Fazer login via API
        login_data = {
            "username": "admin@finaflow.com",
            "password": "admin123"
        }
        
        try:
            response = requests.post(f"{self.backend_url}/api/v1/auth/login", json=login_data, timeout=10)
            self.assertEqual(response.status_code, 200)
            
            login_response = response.json()
            self.auth_token = login_response.get("access_token")
            self.assertIsNotNone(self.auth_token, "Token de acesso n√£o foi retornado")
            
            print("‚úÖ Login realizado com sucesso")
            print(f"‚úÖ Token obtido: {self.auth_token[:20]}...")
            
        except Exception as e:
            self.fail(f"‚ùå Falha no login: {e}")

    def test_03_verify_initial_users_in_database(self):
        """Teste 3: Verificar usu√°rios iniciais no banco de dados"""
        print("\nüîç Teste 3: Verifica√ß√£o de usu√°rios iniciais no banco")
        
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        
        try:
            response = requests.get(f"{self.backend_url}/api/v1/users", headers=headers, timeout=10)
            self.assertEqual(response.status_code, 200)
            
            initial_users = response.json()
            print(f"‚úÖ {len(initial_users)} usu√°rios encontrados no banco inicialmente")
            
            # Verificar se s√£o dados reais (n√£o mock)
            for user in initial_users:
                self.assertIn("id", user, "Usu√°rio deve ter ID")
                self.assertIn("name", user, "Usu√°rio deve ter nome")
                self.assertIn("email", user, "Usu√°rio deve ter email")
                print(f"   - {user['name']} ({user['email']})")
            
            self.initial_users_count = len(initial_users)
            
        except Exception as e:
            self.fail(f"‚ùå Falha ao verificar usu√°rios iniciais: {e}")

    def test_04_create_user_via_api(self):
        """Teste 4: Criar usu√°rio via API e verificar no banco"""
        print("\nüîç Teste 4: Cria√ß√£o de usu√°rio via API")
        
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        
        try:
            # Verificar n√∫mero inicial de usu√°rios
            response = requests.get(f"{self.backend_url}/api/v1/users", headers=headers, timeout=10)
            self.assertEqual(response.status_code, 200)
            initial_users = response.json()
            initial_count = len(initial_users)
            
            # Criar usu√°rio
            response = requests.post(f"{self.backend_url}/api/v1/users", 
                                   json=self.test_user, 
                                   headers=headers, 
                                   timeout=10)
            self.assertEqual(response.status_code, 201)
            
            created_user = response.json()
            self.created_user_id = created_user["id"]
            
            print(f"‚úÖ Usu√°rio criado com ID: {self.created_user_id}")
            print(f"   - Nome: {created_user['name']}")
            print(f"   - Email: {created_user['email']}")
            
            # Verificar se foi realmente salvo no banco
            response = requests.get(f"{self.backend_url}/api/v1/users", headers=headers, timeout=10)
            self.assertEqual(response.status_code, 200)
            
            users_after_create = response.json()
            self.assertEqual(len(users_after_create), initial_count + 1)
            
            # Encontrar o usu√°rio criado na lista
            created_user_in_list = next((u for u in users_after_create if u["id"] == self.created_user_id), None)
            self.assertIsNotNone(created_user_in_list, "Usu√°rio criado n√£o encontrado na lista")
            
            print("‚úÖ Usu√°rio confirmado no banco de dados")
            
        except Exception as e:
            self.fail(f"‚ùå Falha na cria√ß√£o de usu√°rio: {e}")

    def test_05_update_user_via_api(self):
        """Teste 5: Atualizar usu√°rio via API e verificar no banco"""
        print("\nüîç Teste 5: Atualiza√ß√£o de usu√°rio via API")
        
        if not self.created_user_id:
            self.skipTest("Usu√°rio n√£o foi criado no teste anterior")
        
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        
        # Dados de atualiza√ß√£o
        update_data = {
            "name": f"{self.test_user['name']} - ATUALIZADO",
            "phone": f"1188888{int(time.time()) % 10000:04d}",
            "role": "admin"
        }
        
        try:
            # Atualizar usu√°rio
            response = requests.put(f"{self.backend_url}/api/v1/users/{self.created_user_id}", 
                                  json=update_data, 
                                  headers=headers, 
                                  timeout=10)
            self.assertEqual(response.status_code, 200)
            
            updated_user = response.json()
            print(f"‚úÖ Usu√°rio atualizado: {updated_user['name']}")
            
            # Verificar se foi realmente atualizado no banco
            response = requests.get(f"{self.backend_url}/api/v1/users/{self.created_user_id}", 
                                  headers=headers, 
                                  timeout=10)
            self.assertEqual(response.status_code, 200)
            
            user_from_db = response.json()
            self.assertEqual(user_from_db["name"], update_data["name"])
            self.assertEqual(user_from_db["phone"], update_data["phone"])
            self.assertEqual(user_from_db["role"], update_data["role"])
            
            print("‚úÖ Atualiza√ß√£o confirmada no banco de dados")
            
        except Exception as e:
            self.fail(f"‚ùå Falha na atualiza√ß√£o de usu√°rio: {e}")

    def test_06_delete_user_via_api(self):
        """Teste 6: Deletar usu√°rio via API e verificar no banco"""
        print("\nüîç Teste 6: Exclus√£o de usu√°rio via API")
        
        if not self.created_user_id:
            self.skipTest("Usu√°rio n√£o foi criado nos testes anteriores")
        
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        
        try:
            # Deletar usu√°rio
            response = requests.delete(f"{self.backend_url}/api/v1/users/{self.created_user_id}", 
                                     headers=headers, 
                                     timeout=10)
            self.assertEqual(response.status_code, 204)
            
            print("‚úÖ Usu√°rio deletado via API")
            
            # Verificar se foi realmente removido do banco
            response = requests.get(f"{self.backend_url}/api/v1/users", headers=headers, timeout=10)
            self.assertEqual(response.status_code, 200)
            
            users_after_delete = response.json()
            self.assertEqual(len(users_after_delete), self.initial_users_count)
            
            # Verificar se o usu√°rio n√£o existe mais
            response = requests.get(f"{self.backend_url}/api/v1/users/{self.created_user_id}", 
                                  headers=headers, 
                                  timeout=10)
            self.assertEqual(response.status_code, 404)
            
            print("‚úÖ Exclus√£o confirmada no banco de dados")
            
        except Exception as e:
            self.fail(f"‚ùå Falha na exclus√£o de usu√°rio: {e}")

    def test_07_frontend_crud_integration(self):
        """Teste 7: Testar CRUD completo via frontend"""
        print("\nüîç Teste 7: CRUD completo via frontend")
        
        try:
            # 1. Acessar p√°gina de login
            self.driver.get(f"{self.frontend_url}/login")
            self.wait.until(EC.title_contains("FinaFlow - Login"))
            print("‚úÖ P√°gina de login carregada")
            
            # 2. Fazer login
            username_input = self.wait.until(EC.presence_of_element_located((By.NAME, "username")))
            password_input = self.driver.find_element(By.NAME, "password")
            
            username_input.send_keys("admin@finaflow.com")
            password_input.send_keys("admin123")
            
            login_button = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Entrar')]")
            login_button.click()
            
            # 3. Aguardar redirecionamento para dashboard
            self.wait.until(EC.url_contains("/dashboard"))
            print("‚úÖ Login realizado com sucesso")
            
            # 4. Navegar para p√°gina de usu√°rios
            users_link = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//a[@href='/users']")))
            users_link.click()
            
            # 5. Aguardar carregamento da p√°gina de usu√°rios
            self.wait.until(EC.url_contains("/users"))
            print("‚úÖ P√°gina de usu√°rios carregada")
            
            # 6. Verificar se os dados s√£o reais (mesmo n√∫mero do banco)
            users_table = self.wait.until(EC.presence_of_element_located((By.XPATH, "//table")))
            user_rows = users_table.find_elements(By.XPATH, ".//tbody/tr")
            
            # Verificar se h√° pelo menos 3 usu√°rios (dados reais do banco)
            self.assertGreaterEqual(len(user_rows), 3)
            print(f"‚úÖ Tabela mostra {len(user_rows)} usu√°rios (dados reais do banco)")
            
            # 7. Testar cria√ß√£o via frontend
            create_button = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Novo Usu√°rio')]")
            create_button.click()
            
            # Aguardar modal
            modal = self.wait.until(EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'modal')]")))
            print("‚úÖ Modal de cria√ß√£o aberto")
            
            # Preencher formul√°rio
            name_input = modal.find_element(By.NAME, "name")
            email_input = modal.find_element(By.NAME, "email")
            phone_input = modal.find_element(By.NAME, "phone")
            
            test_name = f"Frontend Test {int(time.time())}"
            test_email = f"frontend.test.{int(time.time())}@finaflow.com"
            test_phone = f"1177777{int(time.time()) % 10000:04d}"
            
            name_input.send_keys(test_name)
            email_input.send_keys(test_email)
            phone_input.send_keys(test_phone)
            
            # Salvar
            save_button = modal.find_element(By.XPATH, ".//button[contains(text(), 'Salvar')]")
            save_button.click()
            
            # Aguardar atualiza√ß√£o da tabela
            time.sleep(2)
            updated_user_rows = users_table.find_elements(By.XPATH, ".//tbody/tr")
            self.assertGreaterEqual(len(updated_user_rows), 4)  # Pelo menos 4 usu√°rios ap√≥s cria√ß√£o
            print("‚úÖ Usu√°rio criado via frontend")
            
            # 8. Testar edi√ß√£o via frontend
            edit_button = updated_user_rows[-1].find_element(By.XPATH, ".//button[contains(@title, 'Editar')]")
            edit_button.click()
            
            # Aguardar modal de edi√ß√£o
            edit_modal = self.wait.until(EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'modal')]")))
            print("‚úÖ Modal de edi√ß√£o aberto")
            
            # Modificar nome
            edit_name_input = edit_modal.find_element(By.NAME, "name")
            edit_name_input.clear()
            edit_name_input.send_keys(f"{test_name} - EDITADO")
            
            # Salvar edi√ß√£o
            edit_save_button = edit_modal.find_element(By.XPATH, ".//button[contains(text(), 'Salvar')]")
            edit_save_button.click()
            
            time.sleep(2)
            print("‚úÖ Usu√°rio editado via frontend")
            
            # 9. Testar exclus√£o via frontend
            delete_button = updated_user_rows[-1].find_element(By.XPATH, ".//button[contains(@title, 'Excluir')]")
            delete_button.click()
            
            # Confirmar exclus√£o
            confirm_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Confirmar')]")))
            confirm_button.click()
            
            time.sleep(2)
            final_user_rows = users_table.find_elements(By.XPATH, ".//tbody/tr")
            self.assertGreaterEqual(len(final_user_rows), 3)  # Voltou para pelo menos 3 usu√°rios
            print("‚úÖ Usu√°rio exclu√≠do via frontend")
            
            print("‚úÖ CRUD completo via frontend validado com sucesso!")
            
        except Exception as e:
            self.fail(f"‚ùå Falha no CRUD via frontend: {e}")

def run_qa_tests():
    """Executar todos os testes de QA"""
    print("\nüöÄ INICIANDO TESTES PROFISSIONAIS DE QA - FinaFlow")
    print("=" * 60)
    
    # Configurar suite de testes
    suite = unittest.TestSuite()
    
    # Adicionar testes na ordem correta
    suite.addTest(FinaFlowQATest("test_01_backend_health_check"))
    suite.addTest(FinaFlowQATest("test_02_login_and_get_token"))
    suite.addTest(FinaFlowQATest("test_03_verify_initial_users_in_database"))
    suite.addTest(FinaFlowQATest("test_04_create_user_via_api"))
    suite.addTest(FinaFlowQATest("test_05_update_user_via_api"))
    suite.addTest(FinaFlowQATest("test_06_delete_user_via_api"))
    suite.addTest(FinaFlowQATest("test_07_frontend_crud_integration"))
    
    # Executar testes
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # Relat√≥rio final
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIO FINAL DE QA PROFISSIONAL")
    print("=" * 60)
    print(f"‚úÖ Testes executados: {result.testsRun}")
    print(f"‚ùå Falhas: {len(result.failures)}")
    print(f"‚ö†Ô∏è Erros: {len(result.errors)}")
    
    if result.failures:
        print("\nüîç DETALHES DAS FALHAS:")
        for test, traceback in result.failures:
            print(f"\n‚ùå {test}:")
            print(traceback)
    
    if result.errors:
        print("\nüîç DETALHES DOS ERROS:")
        for test, traceback in result.errors:
            print(f"\n‚ö†Ô∏è {test}:")
            print(traceback)
    
    if result.wasSuccessful():
        print("\nüéâ TODOS OS TESTES PASSARAM - SISTEMA APROVADO!")
        print("‚úÖ Backend: Funcionando")
        print("‚úÖ Frontend: Funcionando")
        print("‚úÖ CRUD: Totalmente operacional")
        print("‚úÖ Banco de dados: Integrado")
        print("‚úÖ Autentica√ß√£o: Funcionando")
        print("‚úÖ Interface: Responsiva")
    else:
        print("\n‚ùå ALGUNS TESTES FALHARAM - NECESS√ÅRIO CORRE√á√ÉO")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    success = run_qa_tests()
    exit(0 if success else 1)
