#!/usr/bin/env python3
"""
Script para verificar e corrigir problemas do frontend FinaFlow
"""

import os
import re
from pathlib import Path

class FrontendFixer:
    def __init__(self):
        self.frontend_path = Path("frontend")
        self.issues = []
        self.fixes = []
        
    def check_auth_context(self):
        """Verifica e corrige o AuthContext"""
        print("üîç Verificando AuthContext...")
        
        auth_file = self.frontend_path / "context" / "AuthContext.tsx"
        if not auth_file.exists():
            self.issues.append("‚ùå AuthContext.tsx n√£o encontrado")
            return
        
        with open(auth_file, 'r') as f:
            content = f.read()
        
        # Verificar se useAuth est√° exportado
        if 'export const useAuth' not in content:
            self.issues.append("‚ùå useAuth n√£o est√° exportado")
            
            # Adicionar o hook useAuth
            if 'import React, { createContext, useState, useEffect, ReactNode }' in content:
                new_import = 'import React, { createContext, useState, useEffect, ReactNode, useContext }'
                content = content.replace(
                    'import React, { createContext, useState, useEffect, ReactNode }',
                    new_import
                )
            
            # Adicionar o hook useAuth ap√≥s a defini√ß√£o do contexto
            if 'export const AuthContext = createContext<AuthContextType>({} as AuthContextType);' in content:
                hook_code = '''
// Hook personalizado para usar o contexto de autentica√ß√£o
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth deve ser usado dentro de um AuthProvider');
  }
  return context;
};
'''
                content = content.replace(
                    'export const AuthContext = createContext<AuthContextType>({} as AuthContextType);',
                    'export const AuthContext = createContext<AuthContextType>({} as AuthContextType);' + hook_code
                )
                
                with open(auth_file, 'w') as f:
                    f.write(content)
                
                self.fixes.append("‚úÖ useAuth adicionado ao AuthContext")
                print("‚úÖ useAuth adicionado ao AuthContext")
        else:
            print("‚úÖ useAuth j√° est√° exportado")
    
    def check_csv_import_page(self):
        """Verifica a p√°gina de importa√ß√£o CSV"""
        print("üîç Verificando p√°gina CSV Import...")
        
        csv_page = self.frontend_path / "pages" / "csv-import.tsx"
        if not csv_page.exists():
            self.issues.append("‚ùå csv-import.tsx n√£o encontrado")
            return
        
        with open(csv_page, 'r') as f:
            content = f.read()
        
        # Verificar importa√ß√µes
        if 'import { useAuth } from \'../context/AuthContext\';' not in content:
            self.issues.append("‚ùå useAuth n√£o est√° sendo importado")
        else:
            print("‚úÖ useAuth est√° sendo importado corretamente")
        
        # Verificar se a p√°gina est√° usando o hook
        if 'const { token } = useAuth();' not in content:
            self.issues.append("‚ùå useAuth n√£o est√° sendo usado")
        else:
            print("‚úÖ useAuth est√° sendo usado corretamente")
    
    def check_package_json(self):
        """Verifica o package.json"""
        print("üîç Verificando package.json...")
        
        package_file = self.frontend_path / "package.json"
        if not package_file.exists():
            self.issues.append("‚ùå package.json n√£o encontrado")
            return
        
        with open(package_file, 'r') as f:
            content = f.read()
        
        # Verificar depend√™ncias essenciais
        essential_deps = [
            "next",
            "react",
            "react-dom",
            "typescript",
            "jwt-decode"
        ]
        
        missing_deps = []
        for dep in essential_deps:
            if f'"{dep}"' not in content:
                missing_deps.append(dep)
        
        if missing_deps:
            self.issues.append(f"‚ùå Depend√™ncias faltando: {missing_deps}")
        else:
            print("‚úÖ Todas as depend√™ncias essenciais est√£o presentes")
    
    def check_tsconfig(self):
        """Verifica o tsconfig.json"""
        print("üîç Verificando tsconfig.json...")
        
        tsconfig_file = self.frontend_path / "tsconfig.json"
        if not tsconfig_file.exists():
            self.issues.append("‚ùå tsconfig.json n√£o encontrado")
            return
        
        with open(tsconfig_file, 'r') as f:
            content = f.read()
        
        # Verificar configura√ß√µes essenciais
        if '"strict": false' in content:
            print("‚ö†Ô∏è  TypeScript strict mode est√° desabilitado")
        else:
            print("‚úÖ TypeScript strict mode est√° habilitado")
        
        if '"jsx": "preserve"' in content:
            print("‚úÖ JSX est√° configurado corretamente")
        else:
            self.issues.append("‚ùå JSX n√£o est√° configurado")
    
    def check_app_structure(self):
        """Verifica a estrutura do app"""
        print("üîç Verificando estrutura do app...")
        
        required_files = [
            "pages/_app.tsx",
            "pages/csv-import.tsx",
            "context/AuthContext.tsx",
            "services/api.ts",
            "package.json",
            "tsconfig.json"
        ]
        
        for file_path in required_files:
            full_path = self.frontend_path / file_path
            if full_path.exists():
                print(f"‚úÖ {file_path}")
            else:
                self.issues.append(f"‚ùå {file_path} n√£o encontrado")
    
    def check_environment_variables(self):
        """Verifica vari√°veis de ambiente"""
        print("üîç Verificando vari√°veis de ambiente...")
        
        env_file = self.frontend_path / ".env.local"
        if not env_file.exists():
            print("‚ö†Ô∏è  .env.local n√£o encontrado - ser√° criado")
            
            env_content = """# Configura√ß√µes da API
NEXT_PUBLIC_API_URL=http://localhost:8000

# Configura√ß√µes do ambiente
NODE_ENV=development
"""
            
            with open(env_file, 'w') as f:
                f.write(env_content)
            
            self.fixes.append("‚úÖ .env.local criado")
            print("‚úÖ .env.local criado")
        else:
            print("‚úÖ .env.local encontrado")
    
    def create_next_config(self):
        """Cria next.config.js se n√£o existir"""
        print("üîç Verificando next.config.js...")
        
        next_config = self.frontend_path / "next.config.js"
        if not next_config.exists():
            print("‚ö†Ô∏è  next.config.js n√£o encontrado - ser√° criado")
            
            config_content = """/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  experimental: {
    appDir: false,
  },
  env: {
    CUSTOM_KEY: process.env.CUSTOM_KEY,
  },
}

module.exports = nextConfig
"""
            
            with open(next_config, 'w') as f:
                f.write(config_content)
            
            self.fixes.append("‚úÖ next.config.js criado")
            print("‚úÖ next.config.js criado")
        else:
            print("‚úÖ next.config.js encontrado")
    
    def create_postcss_config(self):
        """Cria postcss.config.js se n√£o existir"""
        print("üîç Verificando postcss.config.js...")
        
        postcss_config = self.frontend_path / "postcss.config.js"
        if not postcss_config.exists():
            print("‚ö†Ô∏è  postcss.config.js n√£o encontrado - ser√° criado")
            
            config_content = """module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
"""
            
            with open(postcss_config, 'w') as f:
                f.write(config_content)
            
            self.fixes.append("‚úÖ postcss.config.js criado")
            print("‚úÖ postcss.config.js criado")
        else:
            print("‚úÖ postcss.config.js encontrado")
    
    def create_tailwind_config(self):
        """Cria tailwind.config.js se n√£o existir"""
        print("üîç Verificando tailwind.config.js...")
        
        tailwind_config = self.frontend_path / "tailwind.config.js"
        if not tailwind_config.exists():
            print("‚ö†Ô∏è  tailwind.config.js n√£o encontrado - ser√° criado")
            
            config_content = """/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
        },
      },
    },
  },
  plugins: [],
}
"""
            
            with open(tailwind_config, 'w') as f:
                f.write(config_content)
            
            self.fixes.append("‚úÖ tailwind.config.js criado")
            print("‚úÖ tailwind.config.js criado")
        else:
            print("‚úÖ tailwind.config.js encontrado")
    
    def run_fixes(self):
        """Executa todas as corre√ß√µes"""
        print("üöÄ VERIFICANDO E CORRIGINDO PROBLEMAS DO FRONTEND\n")
        print("=" * 60)
        
        checks = [
            ("Estrutura do App", self.check_app_structure),
            ("AuthContext", self.check_auth_context),
            ("P√°gina CSV Import", self.check_csv_import_page),
            ("Package.json", self.check_package_json),
            ("TSConfig", self.check_tsconfig),
            ("Vari√°veis de Ambiente", self.check_environment_variables),
            ("Next Config", self.create_next_config),
            ("PostCSS Config", self.create_postcss_config),
            ("Tailwind Config", self.create_tailwind_config),
        ]
        
        for check_name, check_func in checks:
            try:
                check_func()
            except Exception as e:
                self.issues.append(f"‚ùå Erro no check {check_name}: {e}")
        
        # Relat√≥rio final
        print("\n" + "=" * 60)
        print("üìä RELAT√ìRIO FINAL")
        print("=" * 60)
        
        print(f"\n‚ùå Problemas encontrados: {len(self.issues)}")
        for issue in self.issues:
            print(f"  {issue}")
        
        print(f"\n‚úÖ Corre√ß√µes aplicadas: {len(self.fixes)}")
        for fix in self.fixes:
            print(f"  {fix}")
        
        # Instru√ß√µes para build
        print("\nüéØ PR√ìXIMOS PASSOS")
        print("=" * 60)
        
        if not self.issues:
            print("‚úÖ FRONTEND PRONTO PARA BUILD!")
            print("\nüìã Comandos para executar:")
            print("1. cd frontend")
            print("2. npm install")
            print("3. npm run build")
            print("4. npm start")
        else:
            print("‚ö†Ô∏è  CORRIJA OS PROBLEMAS ANTES DO BUILD!")
            print("\nüîß A√ß√µes necess√°rias:")
            for issue in self.issues:
                print(f"  - {issue}")
        
        print(f"\nüìä Resumo:")
        print(f"  ‚úÖ Corre√ß√µes: {len(self.fixes)}")
        print(f"  ‚ùå Problemas: {len(self.issues)}")
        print(f"  üéØ Status: {'PRONTO' if not self.issues else 'PENDENTE'}")

if __name__ == "__main__":
    fixer = FrontendFixer()
    fixer.run_fixes()
