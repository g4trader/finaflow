#!/usr/bin/env python3
"""
Teste espec√≠fico para problemas de usabilidade na modal de usu√°rios
"""

import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys

def test_modal_usability():
    """Testa especificamente os problemas de usabilidade na modal"""
    
    # Configurar Chrome
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    
    driver = webdriver.Chrome(options=chrome_options)
    
    try:
        print("üß™ Testando usabilidade da modal de usu√°rios...")
        
        # 1. Login
        print("1. Fazendo login...")
        driver.get("https://finaflow.vercel.app/login")
        
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.NAME, "username"))
        )
        
        username_field = driver.find_element(By.NAME, "username")
        password_field = driver.find_element(By.NAME, "password")
        
        username_field.send_keys("admin@finaflow.com")
        password_field.send_keys("admin123")
        
        login_button = driver.find_element(By.XPATH, "//button[contains(text(), 'Entrar')]")
        login_button.click()
        
        WebDriverWait(driver, 10).until(
            EC.url_contains("/dashboard")
        )
        
        print("‚úÖ Login realizado")
        
        # 2. Navegar para usu√°rios
        print("2. Navegando para p√°gina de usu√°rios...")
        driver.get("https://finaflow.vercel.app/users")
        
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//button[contains(text(), 'Novo Usu√°rio')]"))
        )
        
        print("‚úÖ P√°gina de usu√°rios carregada")
        
        # 3. Abrir modal
        print("3. Abrindo modal de novo usu√°rio...")
        novo_usuario_btn = driver.find_element(By.XPATH, "//button[contains(text(), 'Novo Usu√°rio')]")
        novo_usuario_btn.click()
        
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//h3[contains(text(), 'Novo Usu√°rio')]"))
        )
        
        print("‚úÖ Modal aberto")
        
        # 4. Testar campo nome - verificar se perde focus
        print("4. Testando campo nome...")
        nome_field = driver.find_element(By.XPATH, "//input[@placeholder='Digite o nome']")
        nome_field.click()
        nome_field.clear()
        
        # Digitar caractere por caractere para testar focus
        nome_field.send_keys("T")
        time.sleep(0.5)
        nome_field.send_keys("e")
        time.sleep(0.5)
        nome_field.send_keys("s")
        time.sleep(0.5)
        nome_field.send_keys("t")
        time.sleep(0.5)
        nome_field.send_keys("e")
        
        valor_nome = nome_field.get_attribute("value")
        print(f"   Valor do nome: '{valor_nome}'")
        
        if valor_nome == "Teste":
            print("‚úÖ Campo nome funcionando corretamente (sem perda de focus)")
        else:
            print(f"‚ùå Problema no campo nome. Esperado: 'Teste', Obtido: '{valor_nome}'")
        
        # 5. Testar campo telefone - verificar m√°scara
        print("5. Testando campo telefone...")
        telefone_field = driver.find_element(By.XPATH, "//input[@placeholder='(11) 99999-9999']")
        telefone_field.click()
        telefone_field.clear()
        
        # Digitar n√∫mero sem formata√ß√£o
        telefone_field.send_keys("11999999999")
        time.sleep(1)
        
        valor_telefone = telefone_field.get_attribute("value")
        print(f"   Valor do telefone: '{valor_telefone}'")
        
        if "(11) 99999-9999" in valor_telefone:
            print("‚úÖ M√°scara de telefone aplicada corretamente")
        else:
            print(f"‚ùå Problema na m√°scara de telefone. Esperado: '(11) 99999-9999', Obtido: '{valor_telefone}'")
        
        # 6. Testar campo email
        print("6. Testando campo email...")
        email_field = driver.find_element(By.XPATH, "//input[@placeholder='email@exemplo.com']")
        email_field.click()
        email_field.clear()
        email_field.send_keys("teste@exemplo.com")
        
        valor_email = email_field.get_attribute("value")
        print(f"   Valor do email: '{valor_email}'")
        
        if valor_email == "teste@exemplo.com":
            print("‚úÖ Campo email funcionando corretamente")
        else:
            print(f"‚ùå Problema no campo email. Esperado: 'teste@exemplo.com', Obtido: '{valor_email}'")
        
        # 7. Testar cria√ß√£o para verificar se telefone √© salvo corretamente
        print("7. Testando cria√ß√£o de usu√°rio...")
        criar_btn = driver.find_element(By.XPATH, "//button[contains(text(), 'Criar Usu√°rio')]")
        criar_btn.click()
        
        # Aguardar modal fechar
        WebDriverWait(driver, 10).until(
            EC.invisibility_of_element_located((By.XPATH, "//h3[contains(text(), 'Novo Usu√°rio')]"))
        )
        
        print("‚úÖ Usu√°rio criado")
        
        # 8. Verificar se o usu√°rio aparece na lista
        print("8. Verificando se usu√°rio aparece na lista...")
        time.sleep(2)
        
        try:
            # Procurar pelo usu√°rio criado
            usuario_criado = driver.find_element(By.XPATH, "//td[contains(text(), 'Teste')]")
            print("‚úÖ Usu√°rio encontrado na lista")
            
            # Verificar se o telefone est√° formatado corretamente na lista
            try:
                telefone_na_lista = driver.find_element(By.XPATH, "//td[contains(text(), '(11) 99999-9999')]")
                print("‚úÖ Telefone formatado corretamente na lista")
            except:
                print("‚ùå Telefone n√£o encontrado ou n√£o formatado corretamente na lista")
                
        except:
            print("‚ùå Usu√°rio n√£o encontrado na lista")
        
        print("\nüéâ Teste de usabilidade da modal conclu√≠do!")
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        driver.quit()

if __name__ == "__main__":
    test_modal_usability()
