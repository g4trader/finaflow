"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./services/api.ts":
/*!*************************!*\
  !*** ./services/api.ts ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAccount: function() { return /* binding */ createAccount; },\n/* harmony export */   createAccountGroup: function() { return /* binding */ createAccountGroup; },\n/* harmony export */   createAccountSubgroup: function() { return /* binding */ createAccountSubgroup; },\n/* harmony export */   createBankAccount: function() { return /* binding */ createBankAccount; },\n/* harmony export */   createBusinessUnit: function() { return /* binding */ createBusinessUnit; },\n/* harmony export */   createForecast: function() { return /* binding */ createForecast; },\n/* harmony export */   createGroup: function() { return /* binding */ createGroup; },\n/* harmony export */   createSubgroup: function() { return /* binding */ createSubgroup; },\n/* harmony export */   createTenant: function() { return /* binding */ createTenant; },\n/* harmony export */   createTransaction: function() { return /* binding */ createTransaction; },\n/* harmony export */   createUser: function() { return /* binding */ createUser; },\n/* harmony export */   createUserBusinessUnitPermission: function() { return /* binding */ createUserBusinessUnitPermission; },\n/* harmony export */   createUserTenantPermission: function() { return /* binding */ createUserTenantPermission; },\n/* harmony export */   deleteAccount: function() { return /* binding */ deleteAccount; },\n/* harmony export */   deleteBusinessUnit: function() { return /* binding */ deleteBusinessUnit; },\n/* harmony export */   deleteForecast: function() { return /* binding */ deleteForecast; },\n/* harmony export */   deleteGroup: function() { return /* binding */ deleteGroup; },\n/* harmony export */   deleteSubgroup: function() { return /* binding */ deleteSubgroup; },\n/* harmony export */   deleteTenant: function() { return /* binding */ deleteTenant; },\n/* harmony export */   deleteTransaction: function() { return /* binding */ deleteTransaction; },\n/* harmony export */   deleteUser: function() { return /* binding */ deleteUser; },\n/* harmony export */   deleteUserBusinessUnitPermission: function() { return /* binding */ deleteUserBusinessUnitPermission; },\n/* harmony export */   deleteUserTenantPermission: function() { return /* binding */ deleteUserTenantPermission; },\n/* harmony export */   getAccountGroups: function() { return /* binding */ getAccountGroups; },\n/* harmony export */   getAccountSubgroups: function() { return /* binding */ getAccountSubgroups; },\n/* harmony export */   getAccounts: function() { return /* binding */ getAccounts; },\n/* harmony export */   getBankAccounts: function() { return /* binding */ getBankAccounts; },\n/* harmony export */   getBusinessUnits: function() { return /* binding */ getBusinessUnits; },\n/* harmony export */   getCashFlow: function() { return /* binding */ getCashFlow; },\n/* harmony export */   getCashFlowReport: function() { return /* binding */ getCashFlowReport; },\n/* harmony export */   getChartAccountGroups: function() { return /* binding */ getChartAccountGroups; },\n/* harmony export */   getChartAccountSubgroups: function() { return /* binding */ getChartAccountSubgroups; },\n/* harmony export */   getChartAccounts: function() { return /* binding */ getChartAccounts; },\n/* harmony export */   getChartAccountsHierarchy: function() { return /* binding */ getChartAccountsHierarchy; },\n/* harmony export */   getCurrentUser: function() { return /* binding */ getCurrentUser; },\n/* harmony export */   getForecasts: function() { return /* binding */ getForecasts; },\n/* harmony export */   getGroups: function() { return /* binding */ getGroups; },\n/* harmony export */   getImportStatus: function() { return /* binding */ getImportStatus; },\n/* harmony export */   getMyAccess: function() { return /* binding */ getMyAccess; },\n/* harmony export */   getPermissions: function() { return /* binding */ getPermissions; },\n/* harmony export */   getSampleSpreadsheetInfo: function() { return /* binding */ getSampleSpreadsheetInfo; },\n/* harmony export */   getSubgroups: function() { return /* binding */ getSubgroups; },\n/* harmony export */   getTenants: function() { return /* binding */ getTenants; },\n/* harmony export */   getTransactions: function() { return /* binding */ getTransactions; },\n/* harmony export */   getUserBusinessUnitPermissions: function() { return /* binding */ getUserBusinessUnitPermissions; },\n/* harmony export */   getUserBusinessUnits: function() { return /* binding */ getUserBusinessUnits; },\n/* harmony export */   getUserInfo: function() { return /* binding */ getUserInfo; },\n/* harmony export */   getUserPermissions: function() { return /* binding */ getUserPermissions; },\n/* harmony export */   getUserTenantPermissions: function() { return /* binding */ getUserTenantPermissions; },\n/* harmony export */   getUsers: function() { return /* binding */ getUsers; },\n/* harmony export */   importChartAccounts: function() { return /* binding */ importChartAccounts; },\n/* harmony export */   importCsv: function() { return /* binding */ importCsv; },\n/* harmony export */   importFromGoogleSheets: function() { return /* binding */ importFromGoogleSheets; },\n/* harmony export */   login: function() { return /* binding */ login; },\n/* harmony export */   logout: function() { return /* binding */ logout; },\n/* harmony export */   needsBusinessUnitSelection: function() { return /* binding */ needsBusinessUnitSelection; },\n/* harmony export */   selectBusinessUnit: function() { return /* binding */ selectBusinessUnit; },\n/* harmony export */   signup: function() { return /* binding */ signup; },\n/* harmony export */   updateAccount: function() { return /* binding */ updateAccount; },\n/* harmony export */   updateBusinessUnit: function() { return /* binding */ updateBusinessUnit; },\n/* harmony export */   updateForecast: function() { return /* binding */ updateForecast; },\n/* harmony export */   updateGroup: function() { return /* binding */ updateGroup; },\n/* harmony export */   updateSubgroup: function() { return /* binding */ updateSubgroup; },\n/* harmony export */   updateTenant: function() { return /* binding */ updateTenant; },\n/* harmony export */   updateTransaction: function() { return /* binding */ updateTransaction; },\n/* harmony export */   updateUser: function() { return /* binding */ updateUser; },\n/* harmony export */   updateUserBusinessUnitPermission: function() { return /* binding */ updateUserBusinessUnitPermission; },\n/* harmony export */   updateUserPermissions: function() { return /* binding */ updateUserPermissions; },\n/* harmony export */   updateUserTenantPermission: function() { return /* binding */ updateUserTenantPermission; },\n/* harmony export */   validateGoogleSheetsData: function() { return /* binding */ validateGoogleSheetsData; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n\n// Build timestamp: 2025-10-21 18:45:00 - FORÇANDO URL CORRETA DO BACKEND\nconst API_BASE_URL = \"https://finaflow-backend-642830139828.us-central1.run.app\";\n// Log da URL da API (para debug)\nif (true) {\n    console.log(\"\\uD83D\\uDD27 [API Config] API Base URL:\", API_BASE_URL);\n    console.log(\"\\uD83D\\uDD27 [API Config] NEXT_PUBLIC_API_URL:\", \"http://127.0.0.1:8000\");\n}\n// Configuração do axios\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: API_BASE_URL,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    withCredentials: false\n});\n// Interceptor para adicionar token de autenticação\napi.interceptors.request.use((config)=>{\n    if (true) {\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n            config.headers.Authorization = \"Bearer \".concat(token);\n        }\n    }\n    return config;\n});\n// Interceptor para tratamento de erros\napi.interceptors.response.use((response)=>response, async (error)=>{\n    var _error_response;\n    if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401) {\n        // Token expirado, tentar renovar\n        try {\n            const refreshToken = localStorage.getItem(\"refresh-token\");\n            if (refreshToken) {\n                const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"\".concat(API_BASE_URL, \"/api/v1/auth/refresh\"), {\n                    refresh_token: refreshToken\n                });\n                const newToken = response.data.access_token;\n                localStorage.setItem(\"token\", newToken);\n                // Reenviar requisição original com novo token\n                error.config.headers.Authorization = \"Bearer \".concat(newToken);\n                return (0,axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(error.config);\n            }\n        } catch (refreshError) {\n            // Falha ao renovar token, redirecionar para login\n            localStorage.removeItem(\"token\");\n            localStorage.removeItem(\"refresh-token\");\n            window.location.href = \"/login\";\n        }\n    }\n    return Promise.reject(error);\n});\n// Autenticação - Usar proxy para contornar CORS\nconst login = async (username, password)=>{\n    console.log(\"\\uD83D\\uDCE1 [API] Preparando login...\", {\n        username,\n        api_url: API_BASE_URL\n    });\n    try {\n        // Tentar via proxy do Next.js (contorna CORS)\n        console.log(\"\\uD83D\\uDCE4 [API] Tentando via proxy /api/proxy-login\");\n        const proxyResponse = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/api/proxy-login\", {\n            username,\n            password\n        });\n        console.log(\"\\uD83D\\uDCE5 [API] Resposta do proxy recebida:\", {\n            status: proxyResponse.status,\n            has_access_token: !!proxyResponse.data.access_token\n        });\n        // Salvar refresh token\n        if (proxyResponse.data.refresh_token) {\n            localStorage.setItem(\"refresh-token\", proxyResponse.data.refresh_token);\n            console.log(\"\\uD83D\\uDCBE [API] Refresh token salvo\");\n        }\n        return proxyResponse.data;\n    } catch (proxyError) {\n        console.error(\"❌ [API] Erro no proxy, tentando direto...\", proxyError.message);\n        // Fallback: tentar direto (pode falhar por CORS)\n        const formData = new FormData();\n        formData.append(\"username\", username);\n        formData.append(\"password\", password);\n        console.log(\"\\uD83D\\uDCE4 [API] Enviando requisi\\xe7\\xe3o direta para /api/v1/auth/login\");\n        const response = await api.post(\"/api/v1/auth/login\", formData, {\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            }\n        });\n        console.log(\"\\uD83D\\uDCE5 [API] Resposta recebida:\", {\n            status: response.status,\n            has_access_token: !!response.data.access_token,\n            has_refresh_token: !!response.data.refresh_token\n        });\n        // Salvar refresh token\n        if (response.data.refresh_token) {\n            localStorage.setItem(\"refresh-token\", response.data.refresh_token);\n            console.log(\"\\uD83D\\uDCBE [API] Refresh token salvo\");\n        }\n        return response.data;\n    }\n};\nconst signup = async (data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.post(\"/api/v1/users\", data, {\n        headers\n    });\n    return response.data;\n};\nconst logout = async ()=>{\n    try {\n        await api.post(\"/api/v1/auth/logout\");\n    } catch (error) {\n        console.error(\"Erro no logout:\", error);\n    } finally{\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"refresh-token\");\n    }\n};\nconst getCurrentUser = async ()=>{\n    const response = await api.get(\"/api/v1/auth/me\");\n    return response.data;\n};\n// Novos endpoints para seleção de BU/Empresa\nconst getUserBusinessUnits = async ()=>{\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n        console.error(\"❌ [API] Token n\\xe3o encontrado no localStorage\");\n        throw new Error(\"Token n\\xe3o encontrado\");\n    }\n    try {\n        // Tentar via proxy do Next.js (contorna CORS)\n        console.log(\"\\uD83D\\uDCE1 [API] Buscando business units via proxy...\");\n        const proxyResponse = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/api/proxy-business-units\", {\n            headers: {\n                \"Authorization\": \"Bearer \".concat(token)\n            }\n        });\n        console.log(\"✅ [API] Business units carregadas via proxy\");\n        return proxyResponse.data;\n    } catch (proxyError) {\n        console.error(\"❌ [API] Erro no proxy, tentando direto...\", proxyError.message);\n        // Fallback: tentar direto (pode falhar por CORS)\n        const response = await api.get(\"/api/v1/auth/user-business-units\");\n        return response.data;\n    }\n};\nconst selectBusinessUnit = async (businessUnitId)=>{\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n        console.error(\"❌ [API] Token n\\xe3o encontrado para sele\\xe7\\xe3o de BU\");\n        throw new Error(\"Token n\\xe3o encontrado\");\n    }\n    try {\n        // Tentar via proxy do Next.js (contorna CORS e problemas de roteamento)\n        console.log(\"\\uD83D\\uDCE1 [API] Selecionando BU via proxy...\", businessUnitId);\n        const proxyResponse = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/api/proxy-select-bu\", {\n            business_unit_id: businessUnitId\n        }, {\n            headers: {\n                \"Authorization\": \"Bearer \".concat(token)\n            }\n        });\n        console.log(\"✅ [API] BU selecionada via proxy\");\n        return proxyResponse.data;\n    } catch (proxyError) {\n        console.error(\"❌ [API] Erro no proxy de sele\\xe7\\xe3o, tentando direto...\", proxyError.message);\n        // Fallback: tentar direto (pode falhar por CORS ou 404)\n        const response = await api.post(\"/api/v1/auth/select-business-unit\", {\n            business_unit_id: businessUnitId\n        });\n        return response.data;\n    }\n};\n// Grupos de Contas\nconst getAccountGroups = async ()=>{\n    const response = await api.get(\"/api/v1/financial/account-groups\");\n    return response.data;\n};\nconst createAccountGroup = async (data)=>{\n    const response = await api.post(\"/api/v1/financial/account-groups\", data);\n    return response.data;\n};\n// Subgrupos de Contas\nconst getAccountSubgroups = async (groupId, token)=>{\n    const params = groupId ? {\n        group_id: groupId\n    } : {};\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.get(\"/api/v1/financial/account-subgroups\", {\n        params,\n        headers\n    });\n    return response.data;\n};\nconst createAccountSubgroup = async (data)=>{\n    const response = await api.post(\"/api/v1/financial/account-subgroups\", data);\n    return response.data;\n};\n// Contas\nconst getAccounts = async (subgroupId, accountType, token)=>{\n    const params = {};\n    if (subgroupId) params.subgroup_id = subgroupId;\n    if (accountType) params.account_type = accountType;\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.get(\"/api/v1/financial/accounts\", {\n        params,\n        headers\n    });\n    return response.data;\n};\nconst createAccount = async (data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.post(\"/api/v1/financial/accounts\", data, {\n        headers\n    });\n    return response.data;\n};\nconst updateAccount = async (id, data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.put(\"/api/v1/financial/accounts/\".concat(id), data, {\n        headers\n    });\n    return response.data;\n};\nconst deleteAccount = async (id, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.delete(\"/api/v1/financial/accounts/\".concat(id), {\n        headers\n    });\n    return response.data;\n};\n// Subgrupos (alias para getAccountSubgroups)\nconst getSubgroups = async (groupId, token)=>{\n    return getAccountSubgroups(groupId, token);\n};\n// Transações\nconst getTransactions = async (params, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.get(\"/api/v1/financial/transactions\", {\n        params,\n        headers\n    });\n    return response.data;\n};\nconst createTransaction = async (data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.post(\"/api/v1/financial/transactions\", data, {\n        headers\n    });\n    return response.data;\n};\n// Fluxo de Caixa\nconst getCashFlow = async (params, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.get(\"/api/v1/financial/cash-flow\", {\n        params,\n        headers\n    });\n    return response.data;\n};\n// Contas Bancárias\nconst getBankAccounts = async ()=>{\n    const response = await api.get(\"/api/v1/financial/bank-accounts\");\n    return response.data;\n};\nconst createBankAccount = async (data)=>{\n    const response = await api.post(\"/api/v1/financial/bank-accounts\", data);\n    return response.data;\n};\n// Usuários\nconst getUsers = async (token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.get(\"/api/v1/users\", {\n        headers\n    });\n    return response.data;\n};\nconst createUser = async (data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.post(\"/api/v1/users\", data, {\n        headers\n    });\n    return response.data;\n};\nconst deleteUser = async (id, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.delete(\"/api/v1/users/\".concat(id), {\n        headers\n    });\n    return response.data;\n};\n// Tenants\nconst getTenants = async (token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.get(\"/api/v1/tenants\", {\n        headers\n    });\n    return response.data;\n};\nconst createTenant = async (data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.post(\"/api/v1/tenants\", data, {\n        headers\n    });\n    return response.data;\n};\nconst deleteTenant = async (id, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.delete(\"/api/v1/tenants/\".concat(id), {\n        headers\n    });\n    return response.data;\n};\n// Previsões\nconst getForecasts = async (token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.get(\"/api/v1/financial/forecasts\", {\n        headers\n    });\n    return response.data;\n};\nconst createForecast = async (data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.post(\"/api/v1/financial/forecasts\", data, {\n        headers\n    });\n    return response.data;\n};\nconst updateForecast = async (id, data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.put(\"/api/v1/financial/forecasts/\".concat(id), data, {\n        headers\n    });\n    return response.data;\n};\nconst deleteForecast = async (id, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.delete(\"/api/v1/financial/forecasts/\".concat(id), {\n        headers\n    });\n    return response.data;\n};\n// Grupos\nconst getGroups = async (token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.get(\"/api/v1/financial/groups\", {\n        headers\n    });\n    return response.data;\n};\nconst createGroup = async (data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.post(\"/api/v1/financial/groups\", data, {\n        headers\n    });\n    return response.data;\n};\nconst updateGroup = async (id, data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.put(\"/api/v1/financial/groups/\".concat(id), data, {\n        headers\n    });\n    return response.data;\n};\nconst deleteGroup = async (id, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.delete(\"/api/v1/financial/groups/\".concat(id), {\n        headers\n    });\n    return response.data;\n};\n// Subgrupos (funções adicionais)\nconst createSubgroup = async (data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.post(\"/api/v1/financial/account-subgroups\", data, {\n        headers\n    });\n    return response.data;\n};\nconst updateSubgroup = async (id, data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.put(\"/api/v1/financial/account-subgroups/\".concat(id), data, {\n        headers\n    });\n    return response.data;\n};\nconst deleteSubgroup = async (id, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.delete(\"/api/v1/financial/account-subgroups/\".concat(id), {\n        headers\n    });\n    return response.data;\n};\n// Transações (funções adicionais)\nconst updateTransaction = async (id, data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.put(\"/api/v1/financial/transactions/\".concat(id), data, {\n        headers\n    });\n    return response.data;\n};\nconst deleteTransaction = async (id, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.delete(\"/api/v1/financial/transactions/\".concat(id), {\n        headers\n    });\n    return response.data;\n};\n// Importação CSV\nconst importCsv = async (file, table, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"table\", table);\n    const response = await api.post(\"/api/v1/csv/import-csv\", formData, {\n        headers: {\n            ...headers,\n            \"Content-Type\": \"multipart/form-data\"\n        }\n    });\n    return response.data;\n};\n// Relatórios\nconst getCashFlowReport = async (params, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.get(\"/api/v1/financial/cash-flow-report\", {\n        params,\n        headers\n    });\n    return response.data;\n};\n// Usuários\nconst updateUser = async (id, data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.put(\"/api/v1/users/\".concat(id), data, {\n        headers\n    });\n    return response.data;\n};\n// Tenants\nconst updateTenant = async (id, data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.put(\"/api/v1/tenants/\".concat(id), data, {\n        headers\n    });\n    return response.data;\n};\n// Business Units\nconst getBusinessUnits = async (tenantId, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const params = {};\n    if (tenantId) {\n        params.tenant_id = tenantId;\n    }\n    const response = await api.get(\"/api/v1/business-units\", {\n        headers,\n        params\n    });\n    return response.data;\n};\nconst createBusinessUnit = async (data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.post(\"/api/v1/business-units\", data, {\n        headers\n    });\n    return response.data;\n};\nconst updateBusinessUnit = async (id, data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.put(\"/api/v1/business-units/\".concat(id), data, {\n        headers\n    });\n    return response.data;\n};\nconst deleteBusinessUnit = async (id, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.delete(\"/api/v1/business-units/\".concat(id), {\n        headers\n    });\n    return response.data;\n};\n// ============================================================================\n// PERMISSÕES DE USUÁRIO\n// ============================================================================\n// Permissões de Empresa (Tenant)\nconst getUserTenantPermissions = async (userId, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.get(\"/api/v1/permissions/tenants/\".concat(userId), {\n        headers\n    });\n    return response.data;\n};\nconst createUserTenantPermission = async (data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.post(\"/api/v1/permissions/tenants\", data, {\n        headers\n    });\n    return response.data;\n};\nconst updateUserTenantPermission = async (permissionId, data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.put(\"/api/v1/permissions/tenants/\".concat(permissionId), data, {\n        headers\n    });\n    return response.data;\n};\nconst deleteUserTenantPermission = async (permissionId, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.delete(\"/api/v1/permissions/tenants/\".concat(permissionId), {\n        headers\n    });\n    return response.data;\n};\n// Permissões de Business Unit\nconst getUserBusinessUnitPermissions = async (userId, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.get(\"/api/v1/permissions/business-units/\".concat(userId), {\n        headers\n    });\n    return response.data;\n};\nconst createUserBusinessUnitPermission = async (data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.post(\"/api/v1/permissions/business-units\", data, {\n        headers\n    });\n    return response.data;\n};\nconst updateUserBusinessUnitPermission = async (permissionId, data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.put(\"/api/v1/permissions/business-units/\".concat(permissionId), data, {\n        headers\n    });\n    return response.data;\n};\nconst deleteUserBusinessUnitPermission = async (permissionId, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.delete(\"/api/v1/permissions/business-units/\".concat(permissionId), {\n        headers\n    });\n    return response.data;\n};\n// Consulta de permissões do usuário atual\nconst getMyAccess = async (token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.get(\"/api/v1/permissions/my-access\", {\n        headers\n    });\n    return response.data;\n};\nconst getUserInfo = async ()=>{\n    const response = await api.get(\"/api/v1/auth/user-info\");\n    return response.data;\n};\nconst needsBusinessUnitSelection = async ()=>{\n    const response = await api.get(\"/api/v1/auth/needs-business-unit-selection\");\n    return response.data;\n};\nconst getPermissions = async ()=>{\n    const response = await api.get(\"/api/v1/permissions\");\n    return response.data;\n};\nconst getUserPermissions = async (userId, businessUnitId)=>{\n    const response = await api.get(\"/api/v1/permissions/users/\".concat(userId, \"/business-units/\").concat(businessUnitId));\n    return response.data;\n};\nconst updateUserPermissions = async (userId, businessUnitId, permissions)=>{\n    const response = await api.put(\"/api/v1/permissions/users/\".concat(userId, \"/business-units/\").concat(businessUnitId), {\n        permissions\n    });\n    return response.data;\n};\n// ============================================================================\n// FUNÇÕES DO PLANO DE CONTAS\n// ============================================================================\n// Função para obter hierarquia completa do plano de contas\nconst getChartAccountsHierarchy = async (token)=>{\n    try {\n        const response = await api.get(\"/api/v1/chart-accounts/hierarchy\");\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Erro ao buscar hierarquia do plano de contas\");\n    }\n};\n// Função para obter grupos do plano de contas\nconst getChartAccountGroups = async (token)=>{\n    try {\n        const response = await api.get(\"/api/v1/chart-accounts/groups\");\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Erro ao buscar grupos\");\n    }\n};\n// Função para obter subgrupos do plano de contas\nconst getChartAccountSubgroups = async (groupId, token)=>{\n    try {\n        const params = {};\n        if (groupId) {\n            params.group_id = groupId;\n        }\n        const response = await api.get(\"/api/v1/chart-accounts/subgroups\", {\n            params\n        });\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Erro ao buscar subgrupos\");\n    }\n};\n// Função para obter contas do plano de contas\nconst getChartAccounts = async (subgroupId, groupId, token)=>{\n    try {\n        const params = {};\n        if (subgroupId) {\n            params.subgroup_id = subgroupId;\n        }\n        if (groupId) {\n            params.group_id = groupId;\n        }\n        const response = await api.get(\"/api/v1/chart-accounts/accounts\", {\n            params\n        });\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Erro ao buscar contas\");\n    }\n};\n// Função para importar plano de contas do CSV\nconst importChartAccounts = async (file, token)=>{\n    try {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        const headers = {\n            \"Content-Type\": \"multipart/form-data\"\n        };\n        if (token) {\n            headers[\"Authorization\"] = \"Bearer \".concat(token);\n        }\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"\".concat(API_BASE_URL, \"/api/v1/chart-accounts/import\"), formData, {\n            headers\n        });\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Erro ao importar plano de contas\");\n    }\n};\n// ============================================================================\n// IMPORTAÇÃO GOOGLE SHEETS\n// ============================================================================\n// Informações da planilha de exemplo\nconst getSampleSpreadsheetInfo = async (token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.get(\"/api/v1/import/google-sheets/sample\", {\n        headers\n    });\n    return response.data;\n};\n// Validar estrutura de dados de uma planilha Google Sheets\nconst validateGoogleSheetsData = async (spreadsheetId, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.post(\"/api/v1/import/google-sheets/validate\", null, {\n        params: {\n            spreadsheet_id: spreadsheetId\n        },\n        headers\n    });\n    return response.data;\n};\n// Importar dados de uma planilha Google Sheets\nconst importFromGoogleSheets = async (data, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.post(\"/api/v1/import/google-sheets\", data, {\n        headers\n    });\n    return response.data;\n};\n// Obter status de uma importação\nconst getImportStatus = async (importId, token)=>{\n    const headers = {};\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    const response = await api.get(\"/api/v1/import/status/\".concat(importId), {\n        headers\n    });\n    return response.data;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./services/api.ts\n"));

/***/ })

});