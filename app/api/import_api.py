"""
API endpoints para importa√ß√£o de dados
"""

from fastapi import APIRouter, Depends, HTTPException, status, BackgroundTasks
from sqlalchemy.orm import Session
from pydantic import BaseModel, Field
from typing import Optional, Dict, Any
import logging

from app.database import get_db
from app.models.auth import User
from app.services.dependencies import get_current_active_user
from app.services.google_sheets_importer import google_sheets_importer

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/import", tags=["import"])

class ImportRequest(BaseModel):
    """Modelo para requisi√ß√£o de importa√ß√£o"""
    spreadsheet_id: str = Field(..., description="ID da planilha Google Sheets")
    import_type: Optional[str] = Field("all", description="Tipo de importa√ß√£o: all, accounts, transactions, reports")
    validate_only: Optional[bool] = Field(False, description="Apenas validar dados sem importar")

class ImportResponse(BaseModel):
    """Modelo para resposta de importa√ß√£o"""
    success: bool
    message: str
    spreadsheet_id: str
    spreadsheet_title: Optional[str] = None
    sheets_processed: Optional[list] = None
    data_imported: Optional[Dict[str, int]] = None
    errors: Optional[list] = None
    import_id: Optional[str] = None

class ValidationResponse(BaseModel):
    """Modelo para resposta de valida√ß√£o"""
    success: bool
    spreadsheet_id: str
    spreadsheet_title: Optional[str] = None
    sheets_found: list
    data_structure: Dict[str, Any]
    validation_errors: Optional[list] = None

@router.post("/google-sheets", response_model=ImportResponse)
async def import_from_google_sheets(
    request: ImportRequest,
    background_tasks: BackgroundTasks,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """
    Importar dados de uma planilha Google Sheets
    
    Args:
        request: Dados da requisi√ß√£o de importa√ß√£o
        background_tasks: Tarefas em background
        current_user: Usu√°rio autenticado
        db: Sess√£o do banco de dados
    
    Returns:
        Resultado da importa√ß√£o
    """
    try:
        logger.info(f"üöÄ Iniciando importa√ß√£o da planilha {request.spreadsheet_id} pelo usu√°rio {current_user.username}")
        
        # Se for apenas valida√ß√£o, retornar resultado da valida√ß√£o
        if request.validate_only:
            validation_result = await validate_google_sheets_data(
                request.spreadsheet_id,
                current_user,
                db
            )
            return ImportResponse(
                success=validation_result.success,
                message="Valida√ß√£o conclu√≠da",
                spreadsheet_id=request.spreadsheet_id,
                spreadsheet_title=validation_result.spreadsheet_title,
                errors=validation_result.validation_errors
            )
        
        # Executar importa√ß√£o
        result = google_sheets_importer.import_from_spreadsheet(
            spreadsheet_id=request.spreadsheet_id,
            tenant_id=current_user.tenant_id,
            user_id=current_user.id
        )
        
        if result.get("success"):
            # Calcular total de dados importados
            total_imported = sum(result.get("data_imported", {}).values())
            
            return ImportResponse(
                success=True,
                message=f"Importa√ß√£o conclu√≠da com sucesso! {total_imported} registros importados.",
                spreadsheet_id=request.spreadsheet_id,
                spreadsheet_title=result.get("spreadsheet_title"),
                sheets_processed=result.get("sheets_processed", []),
                data_imported=result.get("data_imported", {}),
                errors=result.get("errors", [])
            )
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"Erro na importa√ß√£o: {result.get('error', 'Erro desconhecido')}"
            )
            
    except Exception as e:
        logger.error(f"‚ùå Erro na importa√ß√£o: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro interno: {str(e)}"
        )

@router.post("/google-sheets/validate", response_model=ValidationResponse)
async def validate_google_sheets_data(
    spreadsheet_id: str,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """
    Validar estrutura de dados de uma planilha Google Sheets
    
    Args:
        spreadsheet_id: ID da planilha Google Sheets
        current_user: Usu√°rio autenticado
        db: Sess√£o do banco de dados
    
    Returns:
        Resultado da valida√ß√£o
    """
    try:
        logger.info(f"üîç Validando planilha {spreadsheet_id} pelo usu√°rio {current_user.username}")
        
        # Autenticar se necess√°rio
        if not google_sheets_importer.authenticate():
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Erro na autentica√ß√£o com Google Sheets API"
            )
        
        # Obter informa√ß√µes da planilha
        spreadsheet_info = google_sheets_importer._get_spreadsheet_info(spreadsheet_id)
        if not spreadsheet_info:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="N√£o foi poss√≠vel acessar a planilha. Verifique o ID e as permiss√µes."
            )
        
        # Analisar estrutura das abas
        sheets_analysis = []
        validation_errors = []
        
        for sheet_name in spreadsheet_info.get("sheets", []):
            try:
                data = google_sheets_importer._get_sheet_data(spreadsheet_id, sheet_name)
                sheet_type = google_sheets_importer._determine_sheet_type(sheet_name, data)
                
                sheets_analysis.append({
                    "name": sheet_name,
                    "type": sheet_type,
                    "rows": len(data),
                    "columns": len(data[0]) if data else 0,
                    "headers": data[0] if data else []
                })
                
                # Valida√ß√µes espec√≠ficas por tipo
                if sheet_type == "account_structure" and data:
                    headers = [str(h).lower() for h in data[0]]
                    if not any("conta" in h for h in headers):
                        validation_errors.append(f"Aba '{sheet_name}': Coluna 'Conta' n√£o encontrada")
                    if not any("grupo" in h for h in headers):
                        validation_errors.append(f"Aba '{sheet_name}': Coluna 'Grupo' n√£o encontrada")
                
                elif sheet_type == "transactions" and data:
                    headers = [str(h).lower() for h in data[0]]
                    if not any("data" in h for h in headers):
                        validation_errors.append(f"Aba '{sheet_name}': Coluna 'Data' n√£o encontrada")
                    if not any("valor" in h for h in headers):
                        validation_errors.append(f"Aba '{sheet_name}': Coluna 'Valor' n√£o encontrada")
                
            except Exception as e:
                validation_errors.append(f"Erro ao analisar aba '{sheet_name}': {str(e)}")
        
        return ValidationResponse(
            success=len(validation_errors) == 0,
            spreadsheet_id=spreadsheet_id,
            spreadsheet_title=spreadsheet_info.get("title"),
            sheets_found=[sheet["name"] for sheet in sheets_analysis],
            data_structure={
                "sheets_analysis": sheets_analysis,
                "total_sheets": len(sheets_analysis),
                "supported_sheets": len([s for s in sheets_analysis if s["type"] != "unknown"])
            },
            validation_errors=validation_errors if validation_errors else None
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro na valida√ß√£o: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro interno: {str(e)}"
        )

@router.get("/google-sheets/sample")
async def get_sample_spreadsheet_info():
    """
    Obter informa√ß√µes sobre a planilha de exemplo da metodologia Ana Paula
    
    Returns:
        Informa√ß√µes da planilha de exemplo
    """
    return {
        "spreadsheet_id": "1yyHuP6qjnK2Rd26yPPzaOqi_OJVeRjAJnewRIOJvFVY",
        "description": "Planilha de exemplo da metodologia Ana Paula",
        "sheets": [
            "Plano de contas",
            "Lan√ßamento Di√°rio", 
            "Lan√ßamentos Previstos",
            "Fluxo de caixa-2025",
            "Previs√£o Fluxo de caixa-2025",
            "FC-di√°rio-Jan2025",
            "FC-di√°rio-Fev2025",
            "FC-di√°rio-Mar2025",
            "FC-di√°rio-Abr2025",
            "FC-di√°rio-Mai2025",
            "FC-di√°rio-Jun2025",
            "FC-di√°rio-Jul2025",
            "FC-di√°rio-Ago2025",
            "FC-di√°rio-Set2025",
            "FC-di√°rio-Out2025",
            "FC-di√°rio-Nov2025",
            "FC-di√°rio-Dez2025",
            "Resultados Anuais"
        ],
        "instructions": [
            "1. Use o ID da planilha para importar dados",
            "2. A aba 'Plano de contas' ser√° usada para criar a estrutura de contas",
            "3. As abas 'Lan√ßamento Di√°rio' e 'Lan√ßamentos Previstos' ser√£o usadas para importar transa√ß√µes",
            "4. As abas de fluxo de caixa ser√£o analisadas para relat√≥rios futuros"
        ]
    }

@router.get("/status/{import_id}")
async def get_import_status(
    import_id: str,
    current_user: User = Depends(get_current_active_user)
):
    """
    Obter status de uma importa√ß√£o em andamento
    
    Args:
        import_id: ID da importa√ß√£o
        current_user: Usu√°rio autenticado
    
    Returns:
        Status da importa√ß√£o
    """
    # Por enquanto, retornar status simulado
    # Em implementa√ß√£o futura, isso seria armazenado no banco de dados
    return {
        "import_id": import_id,
        "status": "completed",
        "progress": 100,
        "message": "Importa√ß√£o conclu√≠da",
        "created_at": "2025-09-28T00:00:00Z",
        "completed_at": "2025-09-28T00:05:00Z"
    }
