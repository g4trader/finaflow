#!/usr/bin/env python3
"""
Teste de usabilidade para verificar as corre√ß√µes no CRUD de usu√°rios
"""

import time
import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

def test_usability_fixes():
    """Testa as corre√ß√µes de usabilidade implementadas"""
    
    # Configurar Chrome
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    
    driver = webdriver.Chrome(options=chrome_options)
    
    try:
        print("üß™ Iniciando testes de usabilidade...")
        
        # 1. Testar login
        print("1. Testando login...")
        driver.get("https://finaflow.vercel.app/login")
        
        # Aguardar carregamento da p√°gina
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.NAME, "username"))
        )
        
        # Preencher login
        username_field = driver.find_element(By.NAME, "username")
        password_field = driver.find_element(By.NAME, "password")
        
        username_field.send_keys("admin@finaflow.com")
        password_field.send_keys("admin123")
        
        # Fazer login
        login_button = driver.find_element(By.XPATH, "//button[contains(text(), 'Entrar')]")
        login_button.click()
        
        # Aguardar redirecionamento para dashboard
        WebDriverWait(driver, 10).until(
            EC.url_contains("/dashboard")
        )
        
        print("‚úÖ Login realizado com sucesso")
        
        # 2. Navegar para p√°gina de usu√°rios
        print("2. Navegando para p√°gina de usu√°rios...")
        driver.get("https://finaflow.vercel.app/users")
        
        # Aguardar carregamento da p√°gina
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//button[contains(text(), 'Novo Usu√°rio')]"))
        )
        
        print("‚úÖ P√°gina de usu√°rios carregada")
        
        # 3. Testar modal de cria√ß√£o
        print("3. Testando modal de cria√ß√£o...")
        novo_usuario_btn = driver.find_element(By.XPATH, "//button[contains(text(), 'Novo Usu√°rio')]")
        novo_usuario_btn.click()
        
        # Aguardar modal abrir
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//h2[contains(text(), 'Novo Usu√°rio')]"))
        )
        
        print("‚úÖ Modal aberto com sucesso")
        
        # 4. Testar campo nome (verificar se n√£o perde focus)
        print("4. Testando campo nome...")
        nome_field = driver.find_element(By.XPATH, "//input[@placeholder='Digite o nome']")
        nome_field.click()
        nome_field.send_keys("Teste")
        
        # Verificar se o valor foi digitado corretamente
        if nome_field.get_attribute("value") == "Teste":
            print("‚úÖ Campo nome funcionando corretamente (sem perda de focus)")
        else:
            print("‚ùå Problema no campo nome")
        
        # 5. Testar campo telefone com m√°scara
        print("5. Testando campo telefone...")
        telefone_field = driver.find_element(By.XPATH, "//input[@placeholder='(11) 99999-9999']")
        telefone_field.click()
        telefone_field.clear()
        telefone_field.send_keys("11999999999")
        
        # Aguardar um pouco para a m√°scara ser aplicada
        time.sleep(1)
        
        valor_telefone = telefone_field.get_attribute("value")
        print(f"   Valor do telefone: {valor_telefone}")
        
        if "(11) 99999-9999" in valor_telefone:
            print("‚úÖ M√°scara de telefone aplicada corretamente")
        else:
            print("‚ùå Problema na m√°scara de telefone")
        
        # 6. Testar outros campos
        print("6. Testando outros campos...")
        email_field = driver.find_element(By.XPATH, "//input[@placeholder='email@exemplo.com']")
        email_field.send_keys("teste@exemplo.com")
        
        if email_field.get_attribute("value") == "teste@exemplo.com":
            print("‚úÖ Campo email funcionando corretamente")
        else:
            print("‚ùå Problema no campo email")
        
        # 7. Testar cria√ß√£o de usu√°rio
        print("7. Testando cria√ß√£o de usu√°rio...")
        criar_btn = driver.find_element(By.XPATH, "//button[contains(text(), 'Criar Usu√°rio')]")
        criar_btn.click()
        
        # Aguardar modal fechar
        WebDriverWait(driver, 10).until(
            EC.invisibility_of_element_located((By.XPATH, "//h2[contains(text(), 'Novo Usu√°rio')]"))
        )
        
        print("‚úÖ Usu√°rio criado com sucesso")
        
        # 8. Verificar se o usu√°rio aparece na lista
        print("8. Verificando se usu√°rio aparece na lista...")
        time.sleep(2)  # Aguardar atualiza√ß√£o da lista
        
        # Procurar pelo usu√°rio criado
        try:
            usuario_criado = driver.find_element(By.XPATH, "//td[contains(text(), 'Teste')]")
            print("‚úÖ Usu√°rio encontrado na lista")
        except:
            print("‚ùå Usu√°rio n√£o encontrado na lista")
        
        print("\nüéâ Todos os testes de usabilidade conclu√≠dos!")
        
    except Exception as e:
        print(f"‚ùå Erro durante os testes: {e}")
        
    finally:
        driver.quit()

if __name__ == "__main__":
    test_usability_fixes()
