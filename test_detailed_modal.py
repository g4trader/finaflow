#!/usr/bin/env python3
"""
Teste detalhado para verificar problemas na modal de usu√°rios
"""

import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

def test_detailed_modal():
    """Teste detalhado da modal de usu√°rios"""
    
    # Configurar Chrome
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    
    driver = webdriver.Chrome(options=chrome_options)
    
    try:
        print("üß™ Teste detalhado da modal de usu√°rios...")
        
        # 1. Login
        print("1. Fazendo login...")
        driver.get("https://finaflow.vercel.app/login")
        
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.NAME, "username"))
        )
        
        username_field = driver.find_element(By.NAME, "username")
        password_field = driver.find_element(By.NAME, "password")
        
        username_field.send_keys("admin@finaflow.com")
        password_field.send_keys("admin123")
        
        login_button = driver.find_element(By.XPATH, "//button[contains(text(), 'Entrar')]")
        login_button.click()
        
        WebDriverWait(driver, 10).until(
            EC.url_contains("/dashboard")
        )
        
        print("‚úÖ Login realizado")
        
        # 2. Navegar para usu√°rios
        print("2. Navegando para p√°gina de usu√°rios...")
        driver.get("https://finaflow.vercel.app/users")
        
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//button[contains(text(), 'Novo Usu√°rio')]"))
        )
        
        print("‚úÖ P√°gina de usu√°rios carregada")
        
        # 3. Abrir modal
        print("3. Abrindo modal...")
        novo_usuario_btn = driver.find_element(By.XPATH, "//button[contains(text(), 'Novo Usu√°rio')]")
        novo_usuario_btn.click()
        
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//h3[contains(text(), 'Novo Usu√°rio')]"))
        )
        
        print("‚úÖ Modal aberto")
        
        # 4. Verificar se h√° erros na p√°gina
        print("4. Verificando erros na p√°gina...")
        page_source = driver.page_source.lower()
        
        if "error" in page_source:
            print("‚ùå P√°gina cont√©m texto de erro")
        else:
            print("‚úÖ Nenhum erro encontrado na p√°gina")
        
        if "404" in page_source:
            print("‚ùå P√°gina cont√©m erro 404")
        else:
            print("‚úÖ Nenhum erro 404 encontrado")
        
        # 5. Listar todos os bot√µes na modal
        print("5. Listando bot√µes na modal...")
        try:
            modal = driver.find_element(By.XPATH, "//h3[contains(text(), 'Novo Usu√°rio')]/ancestor::div[contains(@class, 'fixed')]")
            buttons = modal.find_elements(By.TAG_NAME, "button")
            print(f"   Bot√µes encontrados na modal: {len(buttons)}")
            
            for i, btn in enumerate(buttons):
                try:
                    text = btn.text.strip()
                    print(f"   Bot√£o {i+1}: '{text}'")
                except:
                    print(f"   Bot√£o {i+1}: [sem texto]")
                    
        except Exception as e:
            print(f"   Erro ao listar bot√µes: {e}")
        
        # 6. Testar campo nome
        print("6. Testando campo nome...")
        try:
            nome_field = driver.find_element(By.XPATH, "//input[@placeholder='Digite o nome']")
            nome_field.click()
            nome_field.clear()
            nome_field.send_keys("Teste")
            
            valor_nome = nome_field.get_attribute("value")
            print(f"   Valor do nome: '{valor_nome}'")
            
            if valor_nome == "Teste":
                print("‚úÖ Campo nome funcionando corretamente")
            else:
                print(f"‚ùå Problema no campo nome. Esperado: 'Teste', Obtido: '{valor_nome}'")
                
        except Exception as e:
            print(f"‚ùå Erro no campo nome: {e}")
        
        # 7. Testar campo telefone
        print("7. Testando campo telefone...")
        try:
            telefone_field = driver.find_element(By.XPATH, "//input[@placeholder='(11) 99999-9999']")
            telefone_field.click()
            telefone_field.clear()
            telefone_field.send_keys("11999999999")
            time.sleep(1)
            
            valor_telefone = telefone_field.get_attribute("value")
            print(f"   Valor do telefone: '{valor_telefone}'")
            
            if "(11) 99999-9999" in valor_telefone:
                print("‚úÖ M√°scara de telefone aplicada corretamente")
            else:
                print(f"‚ùå Problema na m√°scara de telefone. Esperado: '(11) 99999-9999', Obtido: '{valor_telefone}'")
                
        except Exception as e:
            print(f"‚ùå Erro no campo telefone: {e}")
        
        # 8. Tentar encontrar bot√£o de submit
        print("8. Procurando bot√£o de submit...")
        submit_selectors = [
            "//button[contains(text(), 'Criar Usu√°rio')]",
            "//button[contains(text(), 'Criar')]",
            "//button[contains(text(), 'Salvar')]",
            "//button[contains(text(), 'Submit')]",
            "//button[@type='submit']",
            "//button[contains(@class, 'primary')]"
        ]
        
        submit_button = None
        for selector in submit_selectors:
            try:
                submit_button = driver.find_element(By.XPATH, selector)
                print(f"‚úÖ Bot√£o encontrado com selector: {selector}")
                print(f"   Texto do bot√£o: '{submit_button.text}'")
                break
            except:
                continue
        
        if submit_button:
            print("‚úÖ Bot√£o de submit encontrado")
        else:
            print("‚ùå Nenhum bot√£o de submit encontrado")
        
        # 9. Verificar se h√° problemas de rede
        print("9. Verificando problemas de rede...")
        logs = driver.get_log('browser')
        network_errors = [log for log in logs if '404' in log['message'] or 'error' in log['message'].lower()]
        
        if network_errors:
            print("‚ùå Encontrados erros de rede:")
            for error in network_errors[:3]:  # Mostrar apenas os primeiros 3
                print(f"   - {error['message']}")
        else:
            print("‚úÖ Nenhum erro de rede encontrado")
        
        print("\nüéâ Teste detalhado conclu√≠do!")
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        driver.quit()

if __name__ == "__main__":
    test_detailed_modal()
