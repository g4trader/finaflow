#!/usr/bin/env python3
"""
Script para for√ßar a corre√ß√£o da coluna transaction_type
"""

import requests
import json

# Configura√ß√µes
BACKEND_URL = "https://finaflow-backend-642830139828.us-central1.run.app"
USERNAME = "lucianoterresrosa"
PASSWORD = "xs95LIa9ZduX"

def fazer_login():
    """Fazer login no sistema"""
    print("üîê Fazendo login...")
    
    login_data = {
        "username": USERNAME,
        "password": PASSWORD
    }
    
    response = requests.post(f"{BACKEND_URL}/api/v1/auth/login", data=login_data)
    
    if response.status_code == 200:
        data = response.json()
        token = data.get("access_token")
        print("‚úÖ Login realizado com sucesso")
        return token
    else:
        print(f"‚ùå Erro no login: {response.status_code} - {response.text}")
        return None

def forcar_correcao_coluna(token):
    """For√ßar corre√ß√£o da coluna transaction_type"""
    print("üîß For√ßando corre√ß√£o da coluna transaction_type...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Primeiro, tentar limpar (que deve corrigir a coluna)
    response = requests.post(
        f"{BACKEND_URL}/api/v1/admin/limpar-via-sql", 
        headers=headers
    )
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ Limpeza executada: {data.get('message', 'Sucesso')}")
        
        # Verificar se a coluna foi corrigida
        column_fixed = data.get('column_fixed', False)
        message = data.get('message', '')
        
        if column_fixed or 'corrigida' in message.lower():
            print("‚úÖ Coluna transaction_type foi corrigida!")
            return True
        else:
            print("‚ö†Ô∏è Coluna pode n√£o ter sido corrigida")
            return False
    else:
        print(f"‚ùå Erro na limpeza: {response.status_code} - {response.text}")
        return False

def testar_importacao_simples(token):
    """Testar importa√ß√£o de um lan√ßamento simples"""
    print("üß™ Testando importa√ß√£o de lan√ßamento simples...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Dados de teste
    test_data = {
        "data_movimentacao": "2025-01-01",
        "valor": 100.00,
        "observacoes": "Teste de importa√ß√£o",
        "conta_id": "eb91042e-83eb-4251-9fba-f8b382fcddec",  # ID de uma conta existente
        "subgrupo_id": "9bbc2e28-6cd8-4b35-a3b5-92b81226f0fd",  # ID de um subgrupo existente
        "grupo_id": "61366662-e85d-40c1-93d4-efe172beb137",  # ID de um grupo existente
        "transaction_type": None  # Testar com NULL
    }
    
    response = requests.post(
        f"{BACKEND_URL}/api/v1/lancamentos-diarios", 
        headers=headers,
        json=test_data
    )
    
    if response.status_code == 200:
        print("‚úÖ Teste de importa√ß√£o com transaction_type=NULL funcionou!")
        return True
    else:
        print(f"‚ùå Teste de importa√ß√£o falhou: {response.status_code} - {response.text}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ For√ßando corre√ß√£o da coluna transaction_type")
    print("=" * 60)
    
    # 1. Login
    token = fazer_login()
    if not token:
        print("‚ùå Falha no login. Abortando.")
        return
    
    # 2. For√ßar corre√ß√£o da coluna
    if not forcar_correcao_coluna(token):
        print("‚ùå Falha na corre√ß√£o da coluna.")
        return
    
    # 3. Testar importa√ß√£o simples
    if testar_importacao_simples(token):
        print("\nüéâ Corre√ß√£o bem-sucedida!")
        print("üìä Agora voc√™ pode executar a reimporta√ß√£o completa.")
    else:
        print("\n‚ùå Corre√ß√£o n√£o funcionou. A coluna ainda n√£o permite NULL.")

if __name__ == "__main__":
    main()
